// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getTokenByValue = `-- name: GetTokenByValue :one
SELECT value, created_at, expired_at, is_revoked, user_id
FROM tokens
WHERE value = $1
`

func (q *Queries) GetTokenByValue(ctx context.Context, value string) (Token, error) {
	row := q.db.QueryRowContext(ctx, getTokenByValue, value)
	var i Token
	err := row.Scan(
		&i.Value,
		&i.CreatedAt,
		&i.ExpiredAt,
		&i.IsRevoked,
		&i.UserID,
	)
	return i, err
}

const revokeToken = `-- name: RevokeToken :exec
UPDATE tokens
SET is_revoked = $2
WHERE value = $1
`

type RevokeTokenParams struct {
	Value     string
	IsRevoked bool
}

func (q *Queries) RevokeToken(ctx context.Context, arg RevokeTokenParams) error {
	_, err := q.db.ExecContext(ctx, revokeToken, arg.Value, arg.IsRevoked)
	return err
}

const saveToken = `-- name: SaveToken :exec
INSERT INTO tokens (
  value, created_at, expired_at, user_id
) VALUES ($1, $2, $3, $4)
`

type SaveTokenParams struct {
	Value     string
	CreatedAt time.Time
	ExpiredAt time.Time
	UserID    uuid.UUID
}

func (q *Queries) SaveToken(ctx context.Context, arg SaveTokenParams) error {
	_, err := q.db.ExecContext(ctx, saveToken,
		arg.Value,
		arg.CreatedAt,
		arg.ExpiredAt,
		arg.UserID,
	)
	return err
}
