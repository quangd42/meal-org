// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: recipe_cuisine.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addCuisinesToRecipe = `-- name: AddCuisinesToRecipe :exec
INSERT INTO recipe_cuisine (
  created_at, updated_at, cuisine_id, recipe_id
) VALUES ($1, $2, $3, $4)
`

type AddCuisinesToRecipeParams struct {
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	CuisineID uuid.UUID `json:"cuisine_id"`
	RecipeID  uuid.UUID `json:"recipe_id"`
}

func (q *Queries) AddCuisinesToRecipe(ctx context.Context, arg AddCuisinesToRecipeParams) error {
	_, err := q.db.Exec(ctx, addCuisinesToRecipe,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CuisineID,
		arg.RecipeID,
	)
	return err
}

const listCuisinesByRecipeID = `-- name: ListCuisinesByRecipeID :many
SELECT
  id,
  name,
  recipe_id
FROM cuisines
JOIN recipe_cuisine ON id = cuisine_id
WHERE recipe_id = $1
`

type ListCuisinesByRecipeIDRow struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	RecipeID uuid.UUID `json:"recipe_id"`
}

func (q *Queries) ListCuisinesByRecipeID(ctx context.Context, recipeID uuid.UUID) ([]ListCuisinesByRecipeIDRow, error) {
	rows, err := q.db.Query(ctx, listCuisinesByRecipeID, recipeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCuisinesByRecipeIDRow
	for rows.Next() {
		var i ListCuisinesByRecipeIDRow
		if err := rows.Scan(&i.ID, &i.Name, &i.RecipeID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCuisineFromRecipe = `-- name: RemoveCuisineFromRecipe :exec
DELETE FROM recipe_cuisine
WHERE
  cuisine_id = $1 AND recipe_id = $2
`

type RemoveCuisineFromRecipeParams struct {
	CuisineID uuid.UUID `json:"cuisine_id"`
	RecipeID  uuid.UUID `json:"recipe_id"`
}

func (q *Queries) RemoveCuisineFromRecipe(ctx context.Context, arg RemoveCuisineFromRecipeParams) error {
	_, err := q.db.Exec(ctx, removeCuisineFromRecipe, arg.CuisineID, arg.RecipeID)
	return err
}
