// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: recipe_ingredient.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

type AddIngredientsToRecipeParams struct {
	Amount       string    `json:"amount"`
	PrepNote     *string   `json:"prep_note"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
	IngredientID uuid.UUID `json:"ingredient_id"`
	RecipeID     uuid.UUID `json:"recipe_id"`
	Index        int32     `json:"index"`
}

const listIngredientsByRecipeID = `-- name: ListIngredientsByRecipeID :many
SELECT
  id,
  name,
  amount,
  prep_note,
  recipe_id,
  index
FROM ingredients
JOIN recipe_ingredient ON id = ingredient_id
WHERE recipe_id = $1
ORDER BY index
`

type ListIngredientsByRecipeIDRow struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Amount   string    `json:"amount"`
	PrepNote *string   `json:"prep_note"`
	RecipeID uuid.UUID `json:"recipe_id"`
	Index    int32     `json:"index"`
}

func (q *Queries) ListIngredientsByRecipeID(ctx context.Context, recipeID uuid.UUID) ([]ListIngredientsByRecipeIDRow, error) {
	rows, err := q.db.Query(ctx, listIngredientsByRecipeID, recipeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListIngredientsByRecipeIDRow
	for rows.Next() {
		var i ListIngredientsByRecipeIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Amount,
			&i.PrepNote,
			&i.RecipeID,
			&i.Index,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllIngredientsFromRecipe = `-- name: RemoveAllIngredientsFromRecipe :exec
DELETE FROM recipe_ingredient
WHERE recipe_id = $1
`

func (q *Queries) RemoveAllIngredientsFromRecipe(ctx context.Context, recipeID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeAllIngredientsFromRecipe, recipeID)
	return err
}
